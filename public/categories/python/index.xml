<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Anthony Yoskovich</title>
    <link>/categories/python/</link>
    <description>Recent content in python on Anthony Yoskovich</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using pandas&#39; `.transform()`</title>
      <link>/post/2020/03/06/the-beauty-of-transform/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/06/the-beauty-of-transform/</guid>
      <description>&amp;emsp; Suppose I have a dataframe, and I&amp;rsquo;d like to compute the sum of a variable by group, but I&amp;rsquo;d like to keep this sum in the original table. I could solve this by computing the sum and then merging this table back into the original, but I have to either create a new dataset or overload pd.merge with a horrible block of code.
&amp;emsp; Luckily, there is a function in pandas called .</description>
    </item>
    
    <item>
      <title>Custom Logging in Python</title>
      <link>/post/2020/03/05/applying-complicated-conditionals-to-pandas-dataframes/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/05/applying-complicated-conditionals-to-pandas-dataframes/</guid>
      <description>&amp;emsp; When working with data, there are a lot of things I need to keep track of in my head.
 How many observations do I have in total? I just filtered some out, how many did I throw out? Am I aggregating before or after I filter? Where should I add this chunk of code?  &amp;emsp; In order to keep track of these questions when working in a jupyter notebook I end up having tons of cells that look like this:</description>
    </item>
    
    <item>
      <title>A Handy Use of Python Decorators</title>
      <link>/post/2020/03/04/something-cool-in-python/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/04/something-cool-in-python/</guid>
      <description>Lets say I have the following function, and for some weird reason I want it to be called twice every time I call it.
def foo(): print(&#39;hello&#39;)  I could solve this in a couple of different ways.
def foo(): print(&#39;hello&#39;) print(&#39;hello&#39;)  def foo() print(&#39;hello&#39;) foo() foo()  So&amp;hellip;the first way is bad because if I want to extend this functionality to other funtions, I would have to copy and paste the code everywhere.</description>
    </item>
    
  </channel>
</rss>